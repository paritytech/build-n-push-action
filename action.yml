name: 'Build'
description: 'Builds a Docker image and optionally pushes it to registry'

inputs:
  push_to_registry:
    description: "Whether to push the image to registry ('true' or 'false' as string)"
    required: true
    default: 'false'
  registry_user:
    description: "Registry username (if push_to_registry is 'true')"
    required: false
  registry_password:
    description: "Registry password (if push_to_registry is 'true')"
    required: false
  registry_url:
    description: "Registry url"
    required: false
    default: 'registry.parity.io/parity-internal/'
  image_name:
    description: "Image name"
    required: false
    default: ${{ github.repository }}
  dockerfile_path:
    description: "Dockerfile path"
    required: false
    default: './Dockerfile'
  build_args:
    description: "Build arguments"
    required: false
    default: |
      VCS_REF=${{ github.sha }}
      BUILD_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
  context:
    description: "Build context"
    required: false
    default: '.'

outputs:
  tag:
    description: 'The tag of the built image'
    value: ${{ steps.build-image.outputs.tags }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Output image variables
      shell: bash
      run: |
        echo "IMAGE_NAME=${{ inputs.image_name }}"
        echo "IMAGE_TAGS=${{ github.ref_type == 'tag' && github.ref_name || github.sha }}"

    - name: Buildah
      uses: redhat-actions/buildah-build@v2
      id: build-image
      with:
        format: 'docker'
        build-args: ${{ inputs.build_args }}
        image: ${{ inputs.image_name }}
        tags: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
        context: ${{ inputs.context }}
        containerfiles: |
          ${{ inputs.dockerfile_path }}

    - name: Push image to registry
      if: inputs.push_to_registry == 'true'
      id: push-to-registry
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ inputs.registry_url }}
        username: ${{ inputs.registry_user }}
        password: ${{ inputs.registry_password }}

    - name: Print image url
      if: inputs.push_to_registry == 'true'
      shell: bash
      run: |
        echo "Image pushed to ${{ steps.push-to-registry.outputs.registry-paths }}"
